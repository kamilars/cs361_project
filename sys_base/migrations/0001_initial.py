# Generated by Django 4.1.3 on 2022-12-05 14:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sys_base.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=30)),
                ('password', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentRequest',
            fields=[
                ('requestId', models.AutoField(primary_key=True, serialize=False)),
                ('patient_name', models.CharField(max_length=50)),
                ('patient_surname', models.CharField(max_length=50)),
                ('contact', models.CharField(max_length=50)),
                ('doctor', models.CharField(max_length=100)),
                ('time_slot', models.CharField(max_length=50)),
                ('status', models.CharField(default='not considered', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('iin', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(12), sys_base.models.charfield_is_number_validator])),
                ('name', models.CharField(max_length=30)),
                ('surname', models.CharField(max_length=30)),
                ('middlename', models.CharField(blank=True, default='', max_length=30)),
                ('contact_number', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$', message='Incorrect Phone Number'), django.core.validators.MinLengthValidator(11)])),
                ('department_id', models.PositiveIntegerField()),
                ('specialization_details_id', models.CharField(max_length=30)),
                ('experience', models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('photo_doctor', models.ImageField(default='null', null=True, upload_to='imgs/')),
                ('category_doctor', models.CharField(max_length=10)),
                ('price_of_appointment', models.PositiveIntegerField()),
                ('schedule_details', models.CharField(max_length=30)),
                ('degree', models.CharField(max_length=10)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=2, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('address_doctor', models.CharField(max_length=30)),
                ('account', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('date_of_birth', models.DateField()),
                ('iin', models.CharField(max_length=12, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(12), sys_base.models.charfield_is_number_validator])),
                ('name', models.CharField(max_length=30)),
                ('surname', models.CharField(max_length=30)),
                ('middlename', models.CharField(blank=True, default='', max_length=30)),
                ('blood_group', models.CharField(max_length=3)),
                ('contact_number', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$', message='Incorrect Phone Number'), django.core.validators.MinLengthValidator(11)])),
                ('email', models.CharField(max_length=30, validators=[django.core.validators.EmailValidator])),
                ('address', models.CharField(max_length=30)),
                ('marital_status', models.CharField(max_length=30)),
                ('registration_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Specialize',
            fields=[
                ('doctor_id', models.OneToOneField(db_column='iin', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sys_base.doctor')),
                ('spec', models.CharField(choices=[('Allergist', 'Allergist'), ('Cardiologist', 'Cardiologist'), ('Dermatologists', 'Dermatologist'), ('Endocrinologist', 'Endocrinologist'), ('Physician', 'Physician'), ('Gastroenterologist', 'Gastroenterologist')], default='Allergist', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor', models.CharField(max_length=60)),
                ('date', models.CharField(choices=[('2022-12-05', '2022-12-05'), ('2022-12-06', '2022-12-06'), ('2022-12-07', '2022-12-07'), ('2022-12-08', '2022-12-08'), ('2022-12-09', '2022-12-09'), ('2022-12-10', '2022-12-10'), ('2022-12-11', '2022-12-11')], max_length=60)),
                ('timeslot', models.CharField(choices=[('09:00 – 09:30', '09:00 – 09:30'), ('10:00 – 10:30', '10:00 – 10:30'), ('11:00 – 11:30', '11:00 – 11:30'), ('12:00 – 12:30', '12:00 – 12:30'), ('13:00 – 13:30', '13:00 – 13:30'), ('14:00 – 14:30', '14:00 – 14:30'), ('15:00 – 15:30', '15:00 – 15:30'), ('16:00 – 16:30', '16:00 – 16:30'), ('17:00 – 17:30', '17:00 – 17:30')], max_length=60)),
                ('patient_name', models.CharField(max_length=60)),
                ('patient_surname', models.CharField(max_length=60)),
                ('patient_contact', models.CharField(max_length=60)),
            ],
            options={
                'unique_together': {('doctor', 'date', 'timeslot')},
            },
        ),
    ]
